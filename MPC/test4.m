%衛星2つに関して最適化を行う。
%力の和が0という線形制約を追加することで運動量保存を実現。

%決められた時間で、入力の最大値が最小化するような　プロファイルを計算。
%入力プロファイルの一番最後に最大入力変数を格納
% quadprogでやったら非凸って言われたから解けてない。
% 初期値を設定する際に入力上限を0にしたほうがいいかもしれない。
%最終状態拘束
%進入禁止制約なし
%plotResult2.mで図示

%軌道パラメータ
n = param.n;

%衛星質量
m = param.mass;

%タイムステップ
dt = param.dt;
dt = 10;

%衛星数
num = 2;

% 1衛星に関する状態方程式の係数行列
% x_dot = A_ x + B_ u
A_ = [0, 0, 0, 1/2, 0, 0;
     0, 0, 0, 0, 1/2, 0;
     0, 0, 0, 0, 0, 1/2;
     0, 0, 0, 0, 0, 2*n;
     0, -n^2, 0, 0, 0, 0;
     0, 0, 3*n^2, -2*n, 0, 0]+...
    [0, 0, 0, 1, 0, 2*n;
     0, -n^2, 0, 0, 1, 0;
     0, 0, 3*n^2, -2*n, 0, 1;
     0, 0, 0, 0, 0, 0;
     0, 0, 0, 0, 0, 0;
     0, 0, 0, 0, 0, 0]/2; % 6×6

B_ = [0, 0, 0;
     0, 0, 0;
     0, 0, 0;
     1/m, 0, 0;
     0, 1/m, 0;
     0, 0, 1/m]; % 6×3


%2衛星に関する状態方程式の係数行列
A_ = [A_, zeros(6);zeros(6),A_];
B_ = [B_,zeros(6,3);zeros(6,3),B_];


%2衛星に関する離散時間状態方程式の係数行列
A_d = eye(6*num) + dt*A_; % 6num×6num
B_d = dt*B_; % 6num×3num

%最適化する時間。N×dt秒
N = 500;

%初期状態
s01 = [0.5; 0; 0; 0; 0; 0];
s02 = [-0.5; 0; 0; 0; 0; 0];
s0 = [s01; s02]; % 6num×1

%目標状態
sd1 = [0; 0.3; 0; 0; 0; 0];
sd2 = [0; -0.3; 0; 0; 0; 0];
sd = [sd1; sd2];

%各時刻の状態←各時刻の入力プロファイル,初期状態
%S = PU + Qs_0
P = controllability_matrix(A_d, B_d, N); %6Nnum×3Nnum
P = [P, zeros(6*N*num, 1)]; %6N×3Nnum+1 最大入力に関するスラック変数に関する修正
Q = controllability_matrix2(A_d, N); %6N×6num

%評価関数1(最大入力最小)
f1 = [zeros(1, 3*N*num), 1]; 
f = f1;

% 不等式制約(全ての入力は最大入力以下)
% 最大入力との差が0より大きくなければならない。
A = [eye(3*N*num), -ones(3*N*num,1); -eye(3*N*num), -ones(3*N*num, 1)]; %6N×3Nnum+1
b = zeros(6*N*num, 1);%6Nnum×1

% 等式制約1 (時系列入力に関する関数 運動量保存)
Aeq1 = [ones(N, 3*N*num), zeros(N, 1)];
beq1 = zeros(N, 1);

% 等式制約2 (最終状態固定)
Aeq2 = P(1:6*num,:);
beq2 = sd - Q(1:6*num,:) * s0; 

Aeq = [Aeq1; Aeq2];
beq = [beq1; beq2];

% 線形不等式制約線形計画問題 
[x,fval,exitflag,output,lambda] = ...
   linprog(f, A, b, Aeq, beq);

% 求まった入力
s1 = P * x + Q * s0;

disp('Objective function value:');
disp(fval);
disp("u_max")
disp(x(3*num*N+1))